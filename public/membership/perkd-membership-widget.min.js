
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
        const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }

    function append(target, node) {
        target.appendChild(node);
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function set_svg_attributes(node, attributes) {
        for (const key in attributes) {
            attr(node, key, attributes[key]);
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function claim_element(nodes, name, attributes, svg) {
        for (let i = 0; i < nodes.length; i += 1) {
            const node = nodes[i];
            if (node.nodeName === name) {
                let j = 0;
                const remove = [];
                while (j < node.attributes.length) {
                    const attribute = node.attributes[j++];
                    if (!attributes[attribute.name]) {
                        remove.push(attribute.name);
                    }
                }
                for (let k = 0; k < remove.length; k++) {
                    node.removeAttribute(remove[k]);
                }
                return nodes.splice(i, 1)[0];
            }
        }
        return svg ? svg_element(name) : element(name);
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function custom_event(type, detail) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, false, false, detail);
        return e;
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail);
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
            }
        };
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false
        };
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/components/Badge.svelte generated by Svelte v3.38.2 */

    const file$b = "src/components/Badge.svelte";

    function create_fragment$e(ctx) {
    	let div;
    	let t;
    	let div_class_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text("1");
    			attr_dev(div, "class", div_class_value = "badge bg-red-500 text-white flex items-center justify-center shadow-md " + (/*show*/ ctx[0] ? "visible" : "hidden") + " svelte-upmb5g");
    			add_location(div, file$b, 18, 0, 347);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*show*/ 1 && div_class_value !== (div_class_value = "badge bg-red-500 text-white flex items-center justify-center shadow-md " + (/*show*/ ctx[0] ? "visible" : "hidden") + " svelte-upmb5g")) {
    				attr_dev(div, "class", div_class_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Badge", slots, []);
    	let { show = false } = $$props;
    	const writable_props = ["show"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Badge> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("show" in $$props) $$invalidate(0, show = $$props.show);
    	};

    	$$self.$capture_state = () => ({ show });

    	$$self.$inject_state = $$props => {
    		if ("show" in $$props) $$invalidate(0, show = $$props.show);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [show];
    }

    class Badge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$e, create_fragment$e, safe_not_equal, { show: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Badge",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get show() {
    		throw new Error("<Badge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set show(value) {
    		throw new Error("<Badge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* ./src/assets/close-dark.svg generated by Svelte v3.38.2 */

    function create_fragment$d(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "20" },
    		{ height: "20" },
    		{ viewBox: "0 0 20 20" },
    		{ fill: "none" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			this.h();
    		},
    		l(nodes) {
    			svg = claim_element(
    				nodes,
    				"svg",
    				{
    					width: true,
    					height: true,
    					viewBox: true,
    					fill: true,
    					xmlns: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);
    			path = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
    			children(path).forEach(detach);
    			svg_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(path, "d", "M11.7673 9.99978L19.6335 2.13355C19.8679 1.89917 19.9996 1.58128 19.9996 1.24981C19.9996 0.918338 19.8679 0.600445 19.6335 0.36606C19.3991 0.131676 19.0812 0 18.7498 0C18.4183 0 18.1004 0.131676 17.866 0.36606L9.99978 8.23229L2.13355 0.36606C2.0175 0.250005 1.87972 0.157945 1.72809 0.0951362C1.57645 0.0323275 1.41393 0 1.24981 0C1.08568 0 0.923161 0.0323275 0.771527 0.0951362C0.619893 0.157945 0.482116 0.250005 0.36606 0.36606C0.131676 0.600445 0 0.918338 0 1.24981C0 1.58128 0.131676 1.89917 0.36606 2.13355L8.23229 9.99978L0.36606 17.866C0.131676 18.1004 0 18.4183 0 18.7498C0 19.0812 0.131676 19.3991 0.36606 19.6335C0.600445 19.8679 0.918338 19.9996 1.24981 19.9996C1.58128 19.9996 1.89917 19.8679 2.13355 19.6335L9.99978 11.7673L17.866 19.6335C17.9818 19.75 18.1195 19.8424 18.2712 19.9055C18.4229 19.9686 18.5855 20.001 18.7498 20.001C18.914 20.001 19.0767 19.9686 19.2283 19.9055C19.38 19.8424 19.5177 19.75 19.6335 19.6335C19.7497 19.5175 19.8419 19.3798 19.9047 19.2281C19.9676 19.0765 20 18.9139 20 18.7498C20 18.5856 19.9676 18.423 19.9047 18.2714C19.8419 18.1197 19.7497 17.982 19.6335 17.866L11.7673 9.99978Z");
    			attr(path, "fill", "#000000");
    			set_svg_attributes(svg, svg_data);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "20" },
    				{ height: "20" },
    				{ viewBox: "0 0 20 20" },
    				{ fill: "none" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    function instance$d($$self, $$props, $$invalidate) {
    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class CloseDark extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {});
    	}
    }

    const WINDOW_EVENTS = {
        open: "perkd-membership:open",
        close: "perkd-membership:close",
        toggle: "perkd-membership:toggle",
        signinSuccess: "perkd-membership:signin-success",
        signin: "perkd-membership:signin",
        tierStatus: "perkd-membership:tier-status",
    };
    var STATE;
    (function (STATE) {
        STATE["JOIN"] = "join";
        STATE["SIGNIN"] = "sign-in";
        STATE["TIER_STATUS"] = "tier-status";
        STATE["SIGNED_IN"] = "sign-in-success";
    })(STATE || (STATE = {}));
    const heightStyles = {
        join: "min-height: 300px",
        signIn: "min-height: 360px",
        tierStatus: "min-height: 200px",
    };
    var NOTIFICATION_TYPE;
    (function (NOTIFICATION_TYPE) {
        NOTIFICATION_TYPE["JOIN"] = "join";
        NOTIFICATION_TYPE["PROGRESS"] = "progress";
    })(NOTIFICATION_TYPE || (NOTIFICATION_TYPE = {}));

    /* src/components/Header.svelte generated by Svelte v3.38.2 */

    const file$a = "src/components/Header.svelte";

    function create_fragment$c(ctx) {
    	let div1;
    	let div0;
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			p = element("p");
    			t = text(/*title*/ ctx[0]);
    			attr_dev(p, "class", "svelte-27cc3b");
    			add_location(p, file$a, 11, 2, 211);
    			attr_dev(div0, "class", "leading-5 pointer-events-none select-none");
    			add_location(div0, file$a, 10, 1, 153);
    			attr_dev(div1, "class", "flex flex-col relative");
    			add_location(div1, file$a, 9, 0, 114);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(p, t);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Header", slots, []);
    	let { title = "" } = $$props;
    	const writable_props = ["title"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    	};

    	$$self.$capture_state = () => ({ title });

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title];
    }

    class Header$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { title: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get title() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Notification.svelte generated by Svelte v3.38.2 */
    const file$9 = "src/components/Notification.svelte";

    function create_fragment$b(ctx) {
    	let div1;
    	let header;
    	let t0;
    	let div0;
    	let button;
    	let closesvg;
    	let t1;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header$1({
    			props: { title: /*notificationTitle*/ ctx[0] },
    			$$inline: true
    		});

    	closesvg = new CloseDark({
    			props: {
    				width: "12",
    				class: "cursor-pointer opacity-20 hover:opacity-90"
    			},
    			$$inline: true
    		});

    	const default_slot_template = /*#slots*/ ctx[4].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			button = element("button");
    			create_component(closesvg.$$.fragment);
    			t1 = space();
    			if (default_slot) default_slot.c();
    			attr_dev(button, "class", "px-2 py-1 focus:outline-none rounded-sm hover:bg-gray-100 items-center justify-center flex");
    			add_location(button, file$9, 19, 2, 784);
    			attr_dev(div0, "class", "absolute");
    			set_style(div0, "top", "8px");
    			set_style(div0, "right", "8px");
    			add_location(div0, file$9, 18, 1, 728);
    			attr_dev(div1, "class", "perkd-membership-widget__notification justify-items-start border-gray-200 px-6 py-5 mr-4 shadow-lg h-full rounded-xl bg-gray-50 w-2/3 z-20 svelte-37i67k");
    			add_location(div1, file$9, 16, 0, 536);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(header, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			mount_component(closesvg, button, null);
    			append_dev(div1, t1);

    			if (default_slot) {
    				default_slot.m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};
    			if (dirty & /*notificationTitle*/ 1) header_changes.title = /*notificationTitle*/ ctx[0];
    			header.$set(header_changes);

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
    					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(closesvg.$$.fragment, local);
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(closesvg.$$.fragment, local);
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(header);
    			destroy_component(closesvg);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let notificationTitle;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Notification", slots, ['default']);
    	let { type = null } = $$props;
    	const dispatch = createEventDispatcher();
    	const writable_props = ["type"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Notification> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => dispatch("dismiss");

    	$$self.$$set = $$props => {
    		if ("type" in $$props) $$invalidate(2, type = $$props.type);
    		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		CloseSVG: CloseDark,
    		createEventDispatcher,
    		NOTIFICATION_TYPE,
    		Header: Header$1,
    		type,
    		dispatch,
    		notificationTitle
    	});

    	$$self.$inject_state = $$props => {
    		if ("type" in $$props) $$invalidate(2, type = $$props.type);
    		if ("notificationTitle" in $$props) $$invalidate(0, notificationTitle = $$props.notificationTitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*type*/ 4) {
    			$$invalidate(0, notificationTitle = type === NOTIFICATION_TYPE.PROGRESS
    			? "Membership Progress"
    			: "Join our Membership Program!");
    		}
    	};

    	return [notificationTitle, dispatch, type, $$scope, slots, click_handler];
    }

    class Notification extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { type: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Notification",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get type() {
    		throw new Error("<Notification>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Notification>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/notifications/Join.svelte generated by Svelte v3.38.2 */
    const file$8 = "src/components/notifications/Join.svelte";

    function create_fragment$a(ctx) {
    	let div0;
    	let p0;
    	let t1;
    	let p1;
    	let t3;
    	let hr;
    	let t4;
    	let div1;
    	let a;
    	let t6;
    	let p2;
    	let t7;
    	let span;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "Create an account,  start shopping, and\n\t\t\tqualify for Membership Program!";
    			t1 = space();
    			p1 = element("p");
    			p1.textContent = "Exclusive Members-only products and discounts awaits!";
    			t3 = space();
    			hr = element("hr");
    			t4 = space();
    			div1 = element("div");
    			a = element("a");
    			a.textContent = "Create an account";
    			t6 = space();
    			p2 = element("p");
    			t7 = text("Already have an account?\n\t\t\t");
    			span = element("span");
    			span.textContent = "Sign in";
    			attr_dev(p0, "class", "svelte-12e6c8u");
    			add_location(p0, file$8, 7, 2, 267);
    			attr_dev(p1, "class", "pt-2 svelte-12e6c8u");
    			add_location(p1, file$8, 12, 2, 359);
    			attr_dev(div0, "class", "notification__body my-3 text-sm text-shopify-subdued svelte-12e6c8u");
    			add_location(div0, file$8, 6, 1, 198);
    			add_location(hr, file$8, 14, 1, 443);
    			attr_dev(a, "href", "/account/register");
    			attr_dev(a, "rel", "noopener noreferrer");
    			attr_dev(a, "target", "_parent");
    			attr_dev(a, "class", "outline-none focus:outline-none rounded-md shadow-md py-2 px-6\n\t\t\t\tbg-orange-dark mb-2 font-medium text-white");
    			set_style(a, "font-size", ".9rem");
    			add_location(a, file$8, 17, 3, 520);
    			attr_dev(span, "role", "button");
    			attr_dev(span, "class", "text-shopify-interactive font-semibold");
    			add_location(span, file$8, 21, 3, 842);
    			attr_dev(p2, "class", "text-gray-800");
    			set_style(p2, "font-size", ".8rem");
    			add_location(p2, file$8, 19, 2, 759);
    			attr_dev(div1, "class", "mt-1 flex flex-col justify-center items-center pt-2");
    			add_location(div1, file$8, 16, 1, 451);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, p0);
    			append_dev(div0, t1);
    			append_dev(div0, p1);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, hr, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, a);
    			append_dev(div1, t6);
    			append_dev(div1, p2);
    			append_dev(p2, t7);
    			append_dev(p2, span);

    			if (!mounted) {
    				dispose = listen_dev(span, "click", /*click_handler*/ ctx[1], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(hr);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div1);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Join", slots, []);
    	const dispatch = createEventDispatcher();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Join> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => dispatch("sign-in");
    	$$self.$capture_state = () => ({ createEventDispatcher, dispatch });
    	return [dispatch, click_handler];
    }

    class Join$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Join",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* src/components/notifications/TierProgress.svelte generated by Svelte v3.38.2 */

    const file$7 = "src/components/notifications/TierProgress.svelte";

    function create_fragment$9(ctx) {
    	let div;
    	let p0;
    	let t0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let t5;
    	let p1;

    	const block = {
    		c: function create() {
    			div = element("div");
    			p0 = element("p");
    			t0 = text("Spend $");
    			t1 = text(/*amountToNextTier*/ ctx[0]);
    			t2 = text(" to qualify for ");
    			t3 = text(/*nextTier*/ ctx[1]);
    			t4 = text("!");
    			t5 = space();
    			p1 = element("p");
    			p1.textContent = "Exclusive Members-only products and\n\tdiscounts awaits!";
    			attr_dev(p0, "class", "svelte-12e6c8u");
    			add_location(p0, file$7, 11, 2, 252);
    			attr_dev(p1, "class", "pt-2 svelte-12e6c8u");
    			add_location(p1, file$7, 15, 2, 323);
    			attr_dev(div, "class", "notification__body my-3 text-sm text-shopify-subdued  svelte-12e6c8u");
    			add_location(div, file$7, 10, 0, 182);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, p0);
    			append_dev(p0, t0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			append_dev(p0, t3);
    			append_dev(p0, t4);
    			append_dev(div, t5);
    			append_dev(div, p1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*amountToNextTier*/ 1) set_data_dev(t1, /*amountToNextTier*/ ctx[0]);
    			if (dirty & /*nextTier*/ 2) set_data_dev(t3, /*nextTier*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TierProgress", slots, []);
    	let { amountToNextTier = "xx.00" } = $$props;
    	let { nextTier = "X Tier" } = $$props;
    	const writable_props = ["amountToNextTier", "nextTier"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TierProgress> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ("amountToNextTier" in $$props) $$invalidate(0, amountToNextTier = $$props.amountToNextTier);
    		if ("nextTier" in $$props) $$invalidate(1, nextTier = $$props.nextTier);
    	};

    	$$self.$capture_state = () => ({ amountToNextTier, nextTier });

    	$$self.$inject_state = $$props => {
    		if ("amountToNextTier" in $$props) $$invalidate(0, amountToNextTier = $$props.amountToNextTier);
    		if ("nextTier" in $$props) $$invalidate(1, nextTier = $$props.nextTier);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [amountToNextTier, nextTier];
    }

    class TierProgress extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { amountToNextTier: 0, nextTier: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TierProgress",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get amountToNextTier() {
    		throw new Error("<TierProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set amountToNextTier(value) {
    		throw new Error("<TierProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get nextTier() {
    		throw new Error("<TierProgress>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set nextTier(value) {
    		throw new Error("<TierProgress>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/popup/Header.svelte generated by Svelte v3.38.2 */
    const file$6 = "src/components/popup/Header.svelte";

    // (21:2) {#if subTitle}
    function create_if_block$1(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*subTitle*/ ctx[1]);
    			attr_dev(span, "class", "text-gray-600 font-light svelte-159nba0");
    			add_location(span, file$6, 21, 3, 447);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*subTitle*/ 2) set_data_dev(t, /*subTitle*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(21:2) {#if subTitle}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let div2;
    	let div0;
    	let p;
    	let t0;
    	let t1;
    	let t2;
    	let div1;
    	let button;
    	let closesvg;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*subTitle*/ ctx[1] && create_if_block$1(ctx);

    	closesvg = new CloseDark({
    			props: {
    				width: "12",
    				cls: "cursor-pointer opacity-20 hover:opacity-90"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			p = element("p");
    			t0 = text(/*title*/ ctx[0]);
    			t1 = space();
    			if (if_block) if_block.c();
    			t2 = space();
    			div1 = element("div");
    			button = element("button");
    			create_component(closesvg.$$.fragment);
    			attr_dev(p, "class", "svelte-159nba0");
    			add_location(p, file$6, 19, 2, 412);
    			attr_dev(div0, "class", "leading-5 pointer-events-none select-none mr-6");
    			add_location(div0, file$6, 18, 1, 349);
    			attr_dev(button, "class", "px-2 py-1 focus:outline-none rounded-sm hover:bg-gray-100 items-center justify-center flex");
    			add_location(button, file$6, 26, 2, 582);
    			attr_dev(div1, "class", "absolute");
    			set_style(div1, "top", "-12px");
    			set_style(div1, "right", "-16px");
    			add_location(div1, file$6, 25, 1, 522);
    			attr_dev(div2, "class", "flex flex-col relative");
    			add_location(div2, file$6, 17, 0, 310);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, p);
    			append_dev(p, t0);
    			append_dev(div0, t1);
    			if (if_block) if_block.m(div0, null);
    			append_dev(div2, t2);
    			append_dev(div2, div1);
    			append_dev(div1, button);
    			mount_component(closesvg, button, null);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*title*/ 1) set_data_dev(t0, /*title*/ ctx[0]);

    			if (/*subTitle*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(div0, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(closesvg.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(closesvg.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (if_block) if_block.d();
    			destroy_component(closesvg);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Header", slots, []);
    	const dispatch = createEventDispatcher();
    	let { title = "" } = $$props;
    	let { subTitle = null } = $$props;
    	const writable_props = ["title", "subTitle"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		dispatch("close");
    	};

    	$$self.$$set = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("subTitle" in $$props) $$invalidate(1, subTitle = $$props.subTitle);
    	};

    	$$self.$capture_state = () => ({
    		CloseSVG: CloseDark,
    		createEventDispatcher,
    		dispatch,
    		title,
    		subTitle
    	});

    	$$self.$inject_state = $$props => {
    		if ("title" in $$props) $$invalidate(0, title = $$props.title);
    		if ("subTitle" in $$props) $$invalidate(1, subTitle = $$props.subTitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, subTitle, dispatch, click_handler];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { title: 0, subTitle: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get title() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get subTitle() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set subTitle(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/popup/Join.svelte generated by Svelte v3.38.2 */
    const file$5 = "src/components/popup/Join.svelte";

    function create_fragment$7(ctx) {
    	let div2;
    	let header;
    	let t0;
    	let div0;
    	let p0;
    	let t2;
    	let p1;
    	let t4;
    	let span0;
    	let hr;
    	let t5;
    	let div1;
    	let a;
    	let t7;
    	let p2;
    	let t8;
    	let span1;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: { title: "Membership Program Login" },
    			$$inline: true
    		});

    	header.$on("close", /*close_handler*/ ctx[1]);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p0 = element("p");
    			p0.textContent = "Create an account and start shopping to\n\t\t\tqualify for Membership Program. asdfs";
    			t2 = space();
    			p1 = element("p");
    			p1.textContent = "Exclusive Members-only products and\n\t\tdiscounts awaits!";
    			t4 = space();
    			span0 = element("span");
    			hr = element("hr");
    			t5 = space();
    			div1 = element("div");
    			a = element("a");
    			a.textContent = "Create account";
    			t7 = space();
    			p2 = element("p");
    			t8 = text("Already have an account? ");
    			span1 = element("span");
    			span1.textContent = "Sign in";
    			add_location(p0, file$5, 11, 3, 426);
    			attr_dev(p1, "class", "pt-2");
    			add_location(p1, file$5, 16, 3, 526);
    			attr_dev(div0, "class", "pt-4 text-sm text-shopify-subdued");
    			add_location(div0, file$5, 10, 1, 375);
    			add_location(hr, file$5, 21, 3, 641);
    			attr_dev(span0, "class", "mt-4");
    			add_location(span0, file$5, 20, 2, 618);
    			attr_dev(a, "href", "https://local-perkd-development-2-0.myshopify.com/account/login");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "outline-none focus:outline-none rounded-md shadow-md py-2 px-6\n\t\t\t\t\tbg-orange-dark m-2 font-medium text-white");
    			set_style(a, "font-size", ".9rem");
    			add_location(a, file$5, 25, 3, 729);
    			attr_dev(span1, "role", "button");
    			attr_dev(span1, "class", "text-shopify-interactive  hover:text-blue-800");
    			add_location(span1, file$5, 28, 79, 1111);
    			attr_dev(p2, "class", "text-gray-800");
    			set_style(p2, "font-size", ".8rem");
    			add_location(p2, file$5, 28, 3, 1035);
    			attr_dev(div1, "class", "mt-1 flex flex-col justify-center items-center pt-2");
    			add_location(div1, file$5, 24, 2, 660);
    			attr_dev(div2, "class", "flex flex-col justify-items-start border border-gray-200 px-6 py-5 mr-4 shadow-lg h-full rounded-xl bg-gray-50");
    			set_style(div2, "width", "320px");
    			add_location(div2, file$5, 7, 0, 149);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			mount_component(header, div2, null);
    			append_dev(div2, t0);
    			append_dev(div2, div0);
    			append_dev(div0, p0);
    			append_dev(div0, t2);
    			append_dev(div0, p1);
    			append_dev(div2, t4);
    			append_dev(div2, span0);
    			append_dev(span0, hr);
    			append_dev(div2, t5);
    			append_dev(div2, div1);
    			append_dev(div1, a);
    			append_dev(div1, t7);
    			append_dev(div1, p2);
    			append_dev(p2, t8);
    			append_dev(p2, span1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(span1, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			destroy_component(header);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Join", slots, []);
    	const dispatch = createEventDispatcher();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Join> was created with unknown prop '${key}'`);
    	});

    	const close_handler = () => dispatch("close");

    	const click_handler = () => {
    		dispatch("sign-in");
    	};

    	$$self.$capture_state = () => ({ createEventDispatcher, Header, dispatch });
    	return [dispatch, close_handler, click_handler];
    }

    class Join extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Join",
    			options,
    			id: create_fragment$7.name
    		});
    	}
    }

    /* src/components/popup/Login.svelte generated by Svelte v3.38.2 */
    const file$4 = "src/components/popup/Login.svelte";

    function create_fragment$6(ctx) {
    	let div5;
    	let header;
    	let t0;
    	let div4;
    	let form;
    	let div0;
    	let label0;
    	let t2;
    	let input0;
    	let t3;
    	let div1;
    	let label1;
    	let t5;
    	let input1;
    	let t6;
    	let div2;
    	let span0;
    	let t8;
    	let div3;
    	let button;
    	let t10;
    	let p;
    	let t11;
    	let span1;
    	let current;
    	let mounted;
    	let dispose;

    	header = new Header({
    			props: { title: "Membership Program Login" },
    			$$inline: true
    		});

    	header.$on("close", /*close_handler*/ ctx[1]);

    	const block = {
    		c: function create() {
    			div5 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div4 = element("div");
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			label0.textContent = "Username";
    			t2 = space();
    			input0 = element("input");
    			t3 = space();
    			div1 = element("div");
    			label1 = element("label");
    			label1.textContent = "Password";
    			t5 = space();
    			input1 = element("input");
    			t6 = space();
    			div2 = element("div");
    			span0 = element("span");
    			span0.textContent = "Forgot\tPassword";
    			t8 = space();
    			div3 = element("div");
    			button = element("button");
    			button.textContent = "Sign In";
    			t10 = space();
    			p = element("p");
    			t11 = text("Not a member?\n\t\t\t\t\t");
    			span1 = element("span");
    			span1.textContent = "Sign Up";
    			attr_dev(label0, "class", "block text-gray-700 text-sm font-bold mb-2");
    			attr_dev(label0, "for", "username");
    			add_location(label0, file$4, 12, 5, 463);
    			attr_dev(input0, "class", "shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline");
    			attr_dev(input0, "id", "username");
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "placeholder", "Username");
    			attr_dev(input0, "autocomplete", "username");
    			add_location(input0, file$4, 15, 5, 571);
    			attr_dev(div0, "class", "mb-4");
    			add_location(div0, file$4, 11, 4, 439);
    			attr_dev(label1, "class", "block text-gray-700 text-sm font-bold mb-2");
    			attr_dev(label1, "for", "password");
    			add_location(label1, file$4, 20, 5, 833);
    			attr_dev(input1, "class", "shadow appearance-none border border-red-500 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline");
    			attr_dev(input1, "id", "password");
    			attr_dev(input1, "type", "password");
    			attr_dev(input1, "placeholder", "******************");
    			attr_dev(input1, "autocomplete", "current-password");
    			add_location(input1, file$4, 23, 5, 941);
    			attr_dev(div1, "class", "mb-0");
    			add_location(div1, file$4, 19, 4, 809);
    			attr_dev(span0, "role", "button");
    			attr_dev(span0, "class", "text-xs align-baseline  text-blue-500 hover:text-blue-800");
    			add_location(span0, file$4, 27, 5, 1340);
    			attr_dev(div2, "class", "flex flex-row-reverse -mt-1");
    			add_location(div2, file$4, 26, 4, 1293);
    			attr_dev(button, "class", "outline-none  rounded-md shadow-md py-2 px-6\n\t\t\t\t\t\t\tbg-shopify-interactive m-2 font-medium focus:outline-none focus:shadow-outline text-white");
    			attr_dev(button, "type", "button");
    			set_style(button, "font-size", ".9rem");
    			add_location(button, file$4, 33, 5, 1544);
    			attr_dev(span1, "role", "button");
    			attr_dev(span1, "class", "inline-block align-baseline  text-blue-500 hover:text-blue-800");
    			add_location(span1, file$4, 40, 5, 1869);
    			attr_dev(p, "class", "text-xs");
    			add_location(p, file$4, 38, 5, 1824);
    			attr_dev(div3, "class", "flex mt-2 flex-col items-center justify-between");
    			add_location(div3, file$4, 32, 3, 1477);
    			attr_dev(form, "class", "px-4 pt-4");
    			add_location(form, file$4, 10, 3, 410);
    			attr_dev(div4, "class", "w-full max-w-xs");
    			add_location(div4, file$4, 9, 3, 377);
    			attr_dev(div5, "class", "flex flex-col justify-items-start border border-gray-200 px-6 py-5 mr-4 shadow-lg h-full rounded-xl bg-gray-50");
    			set_style(div5, "width", "320px");
    			add_location(div5, file$4, 7, 0, 149);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div5, anchor);
    			mount_component(header, div5, null);
    			append_dev(div5, t0);
    			append_dev(div5, div4);
    			append_dev(div4, form);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(div0, t2);
    			append_dev(div0, input0);
    			append_dev(form, t3);
    			append_dev(form, div1);
    			append_dev(div1, label1);
    			append_dev(div1, t5);
    			append_dev(div1, input1);
    			append_dev(form, t6);
    			append_dev(form, div2);
    			append_dev(div2, span0);
    			append_dev(form, t8);
    			append_dev(form, div3);
    			append_dev(div3, button);
    			append_dev(div3, t10);
    			append_dev(div3, p);
    			append_dev(p, t11);
    			append_dev(p, span1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[2], false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div5);
    			destroy_component(header);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Login", slots, []);
    	const dispatch = createEventDispatcher();
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	const close_handler = () => dispatch("close");
    	const click_handler = () => dispatch("signed-in");
    	$$self.$capture_state = () => ({ createEventDispatcher, Header, dispatch });
    	return [dispatch, close_handler, click_handler];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$6.name
    		});
    	}
    }

    /* ./src/assets/notice.svg generated by Svelte v3.38.2 */

    function create_fragment$5(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "24" },
    		{ height: "24" },
    		{ viewBox: "0 0 24 24" },
    		{ fill: "none" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			this.h();
    		},
    		l(nodes) {
    			svg = claim_element(
    				nodes,
    				"svg",
    				{
    					width: true,
    					height: true,
    					viewBox: true,
    					fill: true,
    					xmlns: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);

    			path = claim_element(
    				svg_nodes,
    				"path",
    				{
    					"fill-rule": true,
    					"clip-rule": true,
    					d: true,
    					fill: true
    				},
    				1
    			);

    			children(path).forEach(detach);
    			svg_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(path, "fill-rule", "evenodd");
    			attr(path, "clip-rule", "evenodd");
    			attr(path, "d", "M12 0C5.3832 0 0 5.3832 0 12C0 18.6168 5.3832 24 12 24C18.6168 24 24 18.6168 24 12C24 5.3832 18.6168 0 12 0ZM10.8 7.2C10.8 6.53726 11.3373 6 12 6C12.6627 6 13.2 6.53726 13.2 7.2V12C13.2 12.6627 12.6627 13.2 12 13.2C11.3373 13.2 10.8 12.6627 10.8 12V7.2ZM12 18C12.6627 18 13.2 17.4627 13.2 16.8C13.2 16.1373 12.6627 15.6 12 15.6C11.3373 15.6 10.8 16.1373 10.8 16.8C10.8 17.4627 11.3373 18 12 18Z");
    			attr(path, "fill", "#00A0AC");
    			set_svg_attributes(svg, svg_data);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "24" },
    				{ height: "24" },
    				{ viewBox: "0 0 24 24" },
    				{ fill: "none" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    function instance$5($$self, $$props, $$invalidate) {
    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Notice extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});
    	}
    }

    var bind = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    /*global toString:true*/

    // utils is a library of generic helper functions non-specific to axios

    var toString = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray(val) {
      return toString.call(val) === '[object Array]';
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return (typeof FormData !== 'undefined') && (val instanceof FormData);
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject(val) {
      if (toString.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction(val) {
      return toString.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.replace(/^\s*/, '').replace(/\s*$/, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils = {
      isArray: isArray,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString,
      isNumber: isNumber,
      isObject: isObject,
      isPlainObject: isPlainObject,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge,
      extend: extend,
      trim: trim,
      stripBOM: stripBOM
    };

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    function InterceptorManager() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager.prototype.use = function use(fulfilled, rejected) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData = function transformData(data, headers, fns) {
      /*eslint no-param-reassign:0*/
      utils.forEach(fns, function transform(fn) {
        data = fn(data, headers);
      });

      return data;
    };

    var isCancel = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code
        };
      };
      return error;
    };

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var cookies = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var isURLSameOrigin = (
      utils.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;

        if (utils.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        // Listen for ready state
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }

          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle(resolve, reject, response);

          // Clean up request
          request = null;
        };

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (config.responseType) {
          try {
            request.responseType = config.responseType;
          } catch (e) {
            // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
            // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
            if (config.responseType !== 'json') {
              throw e;
            }
          }
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken) {
          // Handle cancellation
          config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) {
              return;
            }

            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
          });
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = xhr;
      }
      return adapter;
    }

    var defaults = {
      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');
        if (utils.isFormData(data) ||
          utils.isArrayBuffer(data) ||
          utils.isBuffer(data) ||
          utils.isStream(data) ||
          utils.isFile(data) ||
          utils.isBlob(data)
        ) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils.isObject(data)) {
          setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
          return JSON.stringify(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        /*eslint no-param-reassign:0*/
        if (typeof data === 'string') {
          try {
            data = JSON.parse(data);
          } catch (e) { /* Ignore */ }
        }
        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      }
    };

    defaults.headers = {
      common: {
        'Accept': 'application/json, text/plain, */*'
      }
    };

    utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1 = defaults;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData(
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults_1.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData(
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData(
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      var valueFromConfig2Keys = ['url', 'method', 'data'];
      var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
      var defaultToConfig2Keys = [
        'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
        'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
        'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
        'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
        'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
      ];
      var directMergeKeys = ['validateStatus'];

      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      }

      utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        }
      });

      utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

      utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          config[prop] = getMergedValue(undefined, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) {
          config[prop] = getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          config[prop] = getMergedValue(undefined, config1[prop]);
        }
      });

      var axiosKeys = valueFromConfig2Keys
        .concat(mergeDeepPropertiesKeys)
        .concat(defaultToConfig2Keys)
        .concat(directMergeKeys);

      var otherKeys = Object
        .keys(config1)
        .concat(Object.keys(config2))
        .filter(function filterAxiosKeys(key) {
          return axiosKeys.indexOf(key) === -1;
        });

      utils.forEach(otherKeys, mergeDeepProperties);

      return config;
    };

    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_1(),
        response: new InterceptorManager_1()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      // Hook up interceptors middleware
      var chain = [dispatchRequest, undefined];
      var promise = Promise.resolve(config);

      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        chain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        chain.push(interceptor.fulfilled, interceptor.rejected);
      });

      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    };

    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios;

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel(message) {
      this.message = message;
    }

    Cancel.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;
      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel_1(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return (typeof payload === 'object') && (payload.isAxiosError === true);
    };

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios_1(defaultConfig);
      var instance = bind(Axios_1.prototype.request, context);

      // Copy axios.prototype to instance
      utils.extend(instance, Axios_1.prototype, context);

      // Copy context to instance
      utils.extend(instance, context);

      return instance;
    }

    // Create the default instance to be exported
    var axios$1 = createInstance(defaults_1);

    // Expose Axios class to allow class inheritance
    axios$1.Axios = Axios_1;

    // Factory for creating new instances
    axios$1.create = function create(instanceConfig) {
      return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
    };

    // Expose Cancel & CancelToken
    axios$1.Cancel = Cancel_1;
    axios$1.CancelToken = CancelToken_1;
    axios$1.isCancel = isCancel;

    // Expose all/spread
    axios$1.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$1.spread = spread;

    // Expose isAxiosError
    axios$1.isAxiosError = isAxiosError;

    var axios_1 = axios$1;

    // Allow use of default import syntax in TypeScript
    var _default = axios$1;
    axios_1.default = _default;

    var axios = axios_1;

    function get(url) {
        return axios.get(url);
    }
    function loadScript(src, isAsync, isDefer) {
        var d = document, el = d.createElement("script");
        (el.type = "text/javascript"),
            (el.async = isAsync),
            (el.defer = isDefer),
            (el.src = `${src}?${Math.random() * 999}`), // cache buster
            d.querySelector("head").appendChild(el);
    }
    var api = { get, loadScript };

    /* src/components/popup/TierStatus.svelte generated by Svelte v3.38.2 */

    const { console: console_1$1 } = globals;
    const file$3 = "src/components/popup/TierStatus.svelte";

    function create_fragment$4(ctx) {
    	let div3;
    	let header;
    	let t0;
    	let div0;
    	let p0;
    	let t1_value = toTitleCase(/*currentTier*/ ctx[0]) + "";
    	let t1;
    	let t2;
    	let t3;
    	let p1;
    	let t4;
    	let t5;
    	let t6;
    	let span0;
    	let hr;
    	let t7;
    	let div2;
    	let div1;
    	let span1;
    	let noticesvg;
    	let t8;
    	let span2;
    	let t9;
    	let t10;
    	let t11;
    	let t12_value = toTitleCase(/*nextTier*/ ctx[1]) + "";
    	let t12;
    	let t13;
    	let current;

    	header = new Header({
    			props: { title: /*headerTitle*/ ctx[4] },
    			$$inline: true
    		});

    	header.$on("close", /*close_handler*/ ctx[7]);
    	noticesvg = new Notice({ props: { width: "14" }, $$inline: true });

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			create_component(header.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p0 = element("p");
    			t1 = text(t1_value);
    			t2 = text(" Tier");
    			t3 = space();
    			p1 = element("p");
    			t4 = text("Member since: ");
    			t5 = text(/*joinedDate*/ ctx[2]);
    			t6 = space();
    			span0 = element("span");
    			hr = element("hr");
    			t7 = space();
    			div2 = element("div");
    			div1 = element("div");
    			span1 = element("span");
    			create_component(noticesvg.$$.fragment);
    			t8 = space();
    			span2 = element("span");
    			t9 = text("$");
    			t10 = text(/*spendToUpgrade*/ ctx[3]);
    			t11 = text(" away from upgrading to ");
    			t12 = text(t12_value);
    			t13 = text(" Membership");
    			attr_dev(p0, "class", "font-bold");
    			add_location(p0, file$3, 58, 3, 2715);
    			attr_dev(p1, "class", "text-xs");
    			add_location(p1, file$3, 59, 3, 2776);
    			attr_dev(div0, "class", "pt-2 text-sm text-shopify-subdued");
    			add_location(div0, file$3, 57, 2, 2664);
    			add_location(hr, file$3, 62, 3, 2861);
    			attr_dev(span0, "class", "mt-4");
    			add_location(span0, file$3, 61, 2, 2838);
    			attr_dev(span1, "class", "mr-2");
    			set_style(span1, "position", "relative");
    			set_style(span1, "top", "-4px");
    			add_location(span1, file$3, 66, 4, 3069);
    			attr_dev(span2, "class", "flex");
    			add_location(span2, file$3, 69, 4, 3174);
    			attr_dev(div1, "class", "flex justify-items-center items-start mb-4 text-xs font-medium text-gray-500");
    			set_style(div1, "font-size", ".8rem");
    			add_location(div1, file$3, 65, 3, 2948);
    			attr_dev(div2, "class", "mt-1 flex flex-col justify-center items-center pt-2");
    			add_location(div2, file$3, 64, 2, 2879);
    			attr_dev(div3, "class", "container flex flex-col justify-items-start border border-gray-200 px-6 py-5 mr-4 shadow-lg h-full rounded-xl bg-gray-50 svelte-1rl7vh");
    			add_location(div3, file$3, 54, 0, 2461);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			mount_component(header, div3, null);
    			append_dev(div3, t0);
    			append_dev(div3, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t1);
    			append_dev(p0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, p1);
    			append_dev(p1, t4);
    			append_dev(p1, t5);
    			append_dev(div3, t6);
    			append_dev(div3, span0);
    			append_dev(span0, hr);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, span1);
    			mount_component(noticesvg, span1, null);
    			append_dev(div1, t8);
    			append_dev(div1, span2);
    			append_dev(span2, t9);
    			append_dev(span2, t10);
    			append_dev(span2, t11);
    			append_dev(span2, t12);
    			append_dev(span2, t13);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const header_changes = {};
    			if (dirty & /*headerTitle*/ 16) header_changes.title = /*headerTitle*/ ctx[4];
    			header.$set(header_changes);
    			if ((!current || dirty & /*currentTier*/ 1) && t1_value !== (t1_value = toTitleCase(/*currentTier*/ ctx[0]) + "")) set_data_dev(t1, t1_value);
    			if (!current || dirty & /*joinedDate*/ 4) set_data_dev(t5, /*joinedDate*/ ctx[2]);
    			if (!current || dirty & /*spendToUpgrade*/ 8) set_data_dev(t10, /*spendToUpgrade*/ ctx[3]);
    			if ((!current || dirty & /*nextTier*/ 2) && t12_value !== (t12_value = toTitleCase(/*nextTier*/ ctx[1]) + "")) set_data_dev(t12, t12_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(noticesvg.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(noticesvg.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(header);
    			destroy_component(noticesvg);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function toTitleCase(str) {
    	if (!str) return "";

    	return str.replace(/\w\S*/g, function (txt) {
    		return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    	});
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let headerTitle;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("TierStatus", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	const dispatch = createEventDispatcher();
    	let { justLoggedIn = false } = $$props;
    	let currentTier = "...";
    	let nextTier = "...";
    	let joinedDate = "...";
    	let spendToUpgrade = "...";

    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		console.info("[WIDGET POPUP]\tON MOUNT ");

    		api.get("https://60e6fb1315387c00173e49d7.mockapi.io/subscription/1").then(res => {
    			var _a, _b;
    			const { data } = res;

    			const _currentTier = data === null || data === void 0
    			? void 0
    			: data.tiers[((_a = data === null || data === void 0 ? void 0 : data.tiers) === null || _a === void 0
    				? void 0
    				: _a.length) - 1];

    			$$invalidate(1, nextTier = ((_b = data === null || data === void 0
    			? void 0
    			: data.nextTier) === null || _b === void 0
    			? void 0
    			: _b.tier) || null);

    			if (_currentTier) {
    				// TODO: create typings
    				const { amountToQualify, amountSpent, joinedDate: _joinedDate } = _currentTier;

    				$$invalidate(3, spendToUpgrade = String(amountToQualify - amountSpent));
    				$$invalidate(2, joinedDate = new Date(_joinedDate).toLocaleDateString());
    				$$invalidate(0, currentTier = _currentTier.tier);
    			}
    		}).catch(err => {
    			console.warn("[WIDGET POPUP]\terror getting tier status", err);
    		});
    	}));

    	const writable_props = ["justLoggedIn"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1$1.warn(`<TierStatus> was created with unknown prop '${key}'`);
    	});

    	const close_handler = () => dispatch("close");

    	$$self.$$set = $$props => {
    		if ("justLoggedIn" in $$props) $$invalidate(6, justLoggedIn = $$props.justLoggedIn);
    	};

    	$$self.$capture_state = () => ({
    		__awaiter,
    		NoticeSVG: Notice,
    		createEventDispatcher,
    		onMount,
    		api,
    		Header,
    		dispatch,
    		justLoggedIn,
    		currentTier,
    		nextTier,
    		joinedDate,
    		spendToUpgrade,
    		toTitleCase,
    		headerTitle
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("justLoggedIn" in $$props) $$invalidate(6, justLoggedIn = $$props.justLoggedIn);
    		if ("currentTier" in $$props) $$invalidate(0, currentTier = $$props.currentTier);
    		if ("nextTier" in $$props) $$invalidate(1, nextTier = $$props.nextTier);
    		if ("joinedDate" in $$props) $$invalidate(2, joinedDate = $$props.joinedDate);
    		if ("spendToUpgrade" in $$props) $$invalidate(3, spendToUpgrade = $$props.spendToUpgrade);
    		if ("headerTitle" in $$props) $$invalidate(4, headerTitle = $$props.headerTitle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*justLoggedIn*/ 64) {
    			$$invalidate(4, headerTitle = justLoggedIn
    			? "Welcome back {User}"
    			: "Membership Status");
    		}
    	};

    	return [
    		currentTier,
    		nextTier,
    		joinedDate,
    		spendToUpgrade,
    		headerTitle,
    		dispatch,
    		justLoggedIn,
    		close_handler
    	];
    }

    class TierStatus extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, { justLoggedIn: 6 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TierStatus",
    			options,
    			id: create_fragment$4.name
    		});
    	}

    	get justLoggedIn() {
    		throw new Error("<TierStatus>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set justLoggedIn(value) {
    		throw new Error("<TierStatus>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Tailwind.svelte generated by Svelte v3.38.2 */

    const file$2 = "src/components/Tailwind.svelte";

    function create_fragment$3(ctx) {
    	let style;

    	const block = {
    		c: function create() {
    			style = element("style");
    			style.textContent = "@import url(\"https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;500;700&display=swap\");\n\n* {\n  font-family: Nunito Sans, Sans;\n  /* subpixel anti-aliased */\n  -webkit-font-smoothing: auto;\n  -moz-osx-font-smoothing: auto;\n  /* -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale; */\n}";
    			add_location(style, file$2, 1, 4, 18);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			append_dev(document.head, style);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			detach_dev(style);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Tailwind", slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tailwind> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class Tailwind extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tailwind",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* ./src/assets/trophy.svg generated by Svelte v3.38.2 */

    function create_fragment$2(ctx) {
    	let svg;
    	let path;

    	let svg_levels = [
    		{ width: "25" },
    		{ height: "23" },
    		{ viewBox: "0 0 25 23" },
    		{ fill: "none" },
    		{ xmlns: "http://www.w3.org/2000/svg" },
    		/*$$props*/ ctx[0]
    	];

    	let svg_data = {};

    	for (let i = 0; i < svg_levels.length; i += 1) {
    		svg_data = assign(svg_data, svg_levels[i]);
    	}

    	return {
    		c() {
    			svg = svg_element("svg");
    			path = svg_element("path");
    			this.h();
    		},
    		l(nodes) {
    			svg = claim_element(
    				nodes,
    				"svg",
    				{
    					width: true,
    					height: true,
    					viewBox: true,
    					fill: true,
    					xmlns: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);
    			path = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
    			children(path).forEach(detach);
    			svg_nodes.forEach(detach);
    			this.h();
    		},
    		h() {
    			attr(path, "d", "M23.9583 2.77778H19.4444V1.04167C19.4444 0.46441 18.98 0 18.4028 0H6.59722C6.01996 0 5.55556 0.46441 5.55556 1.04167V2.77778H1.04167C0.46441 2.77778 0 3.24219 0 3.81944V6.25C0 7.79948 0.976562 9.39236 2.68663 10.6207C4.05382 11.6059 5.71615 12.2309 7.46094 12.4306C8.82378 14.6918 10.4167 15.625 10.4167 15.625V18.75H8.33333C6.80122 18.75 5.55556 19.6484 5.55556 21.1806V21.7014C5.55556 21.9878 5.78993 22.2222 6.07639 22.2222H18.9236C19.2101 22.2222 19.4444 21.9878 19.4444 21.7014V21.1806C19.4444 19.6484 18.1988 18.75 16.6667 18.75H14.5833V15.625C14.5833 15.625 16.1762 14.6918 17.5391 12.4306C19.2882 12.2309 20.9505 11.6059 22.3134 10.6207C24.0191 9.39236 25 7.79948 25 6.25V3.81944C25 3.24219 24.5356 2.77778 23.9583 2.77778ZM4.3099 8.36806C3.25087 7.60417 2.77778 6.75347 2.77778 6.25V5.55556H5.56424C5.60764 6.97049 5.81597 8.2118 6.11979 9.29687C5.46441 9.07118 4.85243 8.75868 4.3099 8.36806ZM22.2222 6.25C22.2222 6.94878 21.454 7.81684 20.6901 8.36806C20.1476 8.75868 19.5312 9.07118 18.8759 9.29687C19.1797 8.2118 19.388 6.97049 19.4314 5.55556H22.2222V6.25Z");
    			attr(path, "fill", "#E48731");
    			set_svg_attributes(svg, svg_data);
    		},
    		m(target, anchor) {
    			insert(target, svg, anchor);
    			append(svg, path);
    		},
    		p(ctx, [dirty]) {
    			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
    				{ width: "25" },
    				{ height: "23" },
    				{ viewBox: "0 0 25 23" },
    				{ fill: "none" },
    				{ xmlns: "http://www.w3.org/2000/svg" },
    				dirty & /*$$props*/ 1 && /*$$props*/ ctx[0]
    			]));
    		},
    		i: noop,
    		o: noop,
    		d(detaching) {
    			if (detaching) detach(svg);
    		}
    	};
    }

    function instance$2($$self, $$props, $$invalidate) {
    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Trophy extends SvelteComponent {
    	constructor(options) {
    		super();
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});
    	}
    }

    /* src/components/Toggler.svelte generated by Svelte v3.38.2 */
    const file$1 = "src/components/Toggler.svelte";

    function create_fragment$1(ctx) {
    	let div4;
    	let div3;
    	let div2;
    	let div0;
    	let trophysvg;
    	let t0;
    	let div1;
    	let svg;
    	let circle;
    	let circle_stroke_dashoffset_value;
    	let div2_style_value;
    	let t1;
    	let button;
    	let t2;
    	let button_style_value;
    	let current;
    	let mounted;
    	let dispose;

    	trophysvg = new Trophy({
    			props: { width: "24", class: "opacity-40" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			create_component(trophysvg.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			circle = svg_element("circle");
    			t1 = space();
    			button = element("button");
    			t2 = text("x");
    			attr_dev(div0, "class", "font-medium text-xs flex flex-row items-center justify-center");
    			add_location(div0, file$1, 97, 4, 2584);
    			attr_dev(circle, "class", "text-orange-dark progress-ring__circle svelte-1yfpqcy");
    			attr_dev(circle, "stroke-width", "4");
    			attr_dev(circle, "stroke-dasharray", "" + (/*circumference*/ ctx[4] + " " + /*circumference*/ ctx[4]));
    			attr_dev(circle, "stroke-dashoffset", circle_stroke_dashoffset_value = /*circumference*/ ctx[4] - /*progress*/ ctx[1] / 100 * /*circumference*/ ctx[4]);
    			attr_dev(circle, "stroke-linecap", "round");
    			attr_dev(circle, "stroke", "currentColor");
    			attr_dev(circle, "fill", "transparent");
    			attr_dev(circle, "r", "34");
    			attr_dev(circle, "cx", "40");
    			attr_dev(circle, "cy", "40");
    			add_location(circle, file$1, 104, 8, 2889);
    			attr_dev(svg, "class", "w-20 h-20");
    			add_location(svg, file$1, 103, 7, 2857);
    			attr_dev(div1, "x-data", "scrollProgress");
    			attr_dev(div1, "class", "fixed inline-flex items-center justify-center overflow-hidden rounded-full z-0");
    			add_location(div1, file$1, 100, 4, 2726);
    			attr_dev(div2, "class", "widget-toggler__default\n      flex flex-row\n      cursor-pointer\n      items-center  justify-center  border\n      shadow-lg svelte-1yfpqcy");
    			attr_dev(div2, "style", div2_style_value = /*styleToggleDefault*/ ctx[2] + "color:white;");
    			add_location(div2, file$1, 91, 2, 2393);
    			attr_dev(button, "style", button_style_value = /*styleToggleClose*/ ctx[3] + "color: white;");
    			attr_dev(button, "class", "widget-toggler__close flex  items-center bg-orange-dark justify-center shadow-lg border svelte-1yfpqcy");
    			add_location(button, file$1, 120, 2, 3360);
    			attr_dev(div3, "id", "widget-toggler__btn");
    			attr_dev(div3, "aria-label", "Perkd Rewards Program");
    			attr_dev(div3, "class", "flex justify-end\n          tracking-normal\n          outline-none focus:outline-none p-4 items-center svelte-1yfpqcy");
    			add_location(div3, file$1, 79, 2, 2045);
    			attr_dev(div4, "class", "widget-toggler svelte-1yfpqcy");
    			add_location(div4, file$1, 78, 1, 2014);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			mount_component(trophysvg, div0, null);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, svg);
    			append_dev(svg, circle);
    			append_dev(div3, t1);
    			append_dev(div3, button);
    			append_dev(button, t2);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(div3, "click", /*click_handler*/ ctx[6], false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*progress*/ 2 && circle_stroke_dashoffset_value !== (circle_stroke_dashoffset_value = /*circumference*/ ctx[4] - /*progress*/ ctx[1] / 100 * /*circumference*/ ctx[4])) {
    				attr_dev(circle, "stroke-dashoffset", circle_stroke_dashoffset_value);
    			}

    			if (!current || dirty & /*styleToggleDefault*/ 4 && div2_style_value !== (div2_style_value = /*styleToggleDefault*/ ctx[2] + "color:white;")) {
    				attr_dev(div2, "style", div2_style_value);
    			}

    			if (!current || dirty & /*styleToggleClose*/ 8 && button_style_value !== (button_style_value = /*styleToggleClose*/ ctx[3] + "color: white;")) {
    				attr_dev(button, "style", button_style_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(trophysvg.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(trophysvg.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			destroy_component(trophysvg);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let styleToggleDefault;
    	let styleToggleClose;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("Toggler", slots, []);
    	let { isToggled = false } = $$props;
    	let { progress = 0 } = $$props;
    	const circumference = 34 * 2 * Math.PI;
    	const dispatch = createEventDispatcher();
    	const writable_props = ["isToggled", "progress"];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Toggler> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => {
    		dispatch("toggle");
    		$$invalidate(0, isToggled = !isToggled);
    	};

    	$$self.$$set = $$props => {
    		if ("isToggled" in $$props) $$invalidate(0, isToggled = $$props.isToggled);
    		if ("progress" in $$props) $$invalidate(1, progress = $$props.progress);
    	};

    	$$self.$capture_state = () => ({
    		TrophySVG: Trophy,
    		createEventDispatcher,
    		isToggled,
    		progress,
    		circumference,
    		dispatch,
    		styleToggleDefault,
    		styleToggleClose
    	});

    	$$self.$inject_state = $$props => {
    		if ("isToggled" in $$props) $$invalidate(0, isToggled = $$props.isToggled);
    		if ("progress" in $$props) $$invalidate(1, progress = $$props.progress);
    		if ("styleToggleDefault" in $$props) $$invalidate(2, styleToggleDefault = $$props.styleToggleDefault);
    		if ("styleToggleClose" in $$props) $$invalidate(3, styleToggleClose = $$props.styleToggleClose);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isToggled*/ 1) {
    			$$invalidate(2, styleToggleDefault = isToggled
    			? "transform: translateX(60px); transition: opacity 0.1s; opacity:0; z-index: -1; pointer-events: none;"
    			: "transform: translateX(0px); transition: opacity 0.2s; opacity:1; z-index: 5;  transition: all .2s ease-in-out!important; ");
    		}

    		if ($$self.$$.dirty & /*isToggled*/ 1) {
    			$$invalidate(3, styleToggleClose = isToggled
    			? "transform: translateX(0px); transition: opacity 0.1s; opacity:1; z-index:5;"
    			: "transform: translateX(-5px); transition: opacity 0.1s; opacity:0;  transition: all .2s ease-in-out!important; z-index:-1;");
    		}
    	};

    	return [
    		isToggled,
    		progress,
    		styleToggleDefault,
    		styleToggleClose,
    		circumference,
    		dispatch,
    		click_handler
    	];
    }

    class Toggler extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, { isToggled: 0, progress: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Toggler",
    			options,
    			id: create_fragment$1.name
    		});
    	}

    	get isToggled() {
    		throw new Error("<Toggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isToggled(value) {
    		throw new Error("<Toggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get progress() {
    		throw new Error("<Toggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set progress(value) {
    		throw new Error("<Toggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/App.svelte generated by Svelte v3.38.2 */

    const { console: console_1 } = globals;
    const file = "src/App.svelte";

    // (184:9) {#if state === STATE.JOIN}
    function create_if_block_3(ctx) {
    	let joinpopup;
    	let current;
    	joinpopup = new Join({ $$inline: true });
    	joinpopup.$on("close", /*handleToggle*/ ctx[10]);
    	joinpopup.$on("sign-in", /*sign_in_handler*/ ctx[12]);

    	const block = {
    		c: function create() {
    			create_component(joinpopup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(joinpopup, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(joinpopup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(joinpopup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(joinpopup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(184:9) {#if state === STATE.JOIN}",
    		ctx
    	});

    	return block;
    }

    // (189:9) {#if state === STATE.SIGNIN}
    function create_if_block_2(ctx) {
    	let login;
    	let current;
    	login = new Login({ $$inline: true });
    	login.$on("close", /*handleToggle*/ ctx[10]);
    	login.$on("signed-in", /*signed_in_handler*/ ctx[13]);

    	const block = {
    		c: function create() {
    			create_component(login.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(login, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(login.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(login.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(login, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(189:9) {#if state === STATE.SIGNIN}",
    		ctx
    	});

    	return block;
    }

    // (194:9) {#if state === STATE.TIER_STATUS || state === STATE.SIGNED_IN}
    function create_if_block_1(ctx) {
    	let tierstatus;
    	let current;

    	tierstatus = new TierStatus({
    			props: {
    				justLoggedIn: /*state*/ ctx[2] === STATE.SIGNED_IN
    			},
    			$$inline: true
    		});

    	tierstatus.$on("close", /*handleToggle*/ ctx[10]);

    	const block = {
    		c: function create() {
    			create_component(tierstatus.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tierstatus, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tierstatus_changes = {};
    			if (dirty & /*state*/ 4) tierstatus_changes.justLoggedIn = /*state*/ ctx[2] === STATE.SIGNED_IN;
    			tierstatus.$set(tierstatus_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tierstatus.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tierstatus.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tierstatus, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(194:9) {#if state === STATE.TIER_STATUS || state === STATE.SIGNED_IN}",
    		ctx
    	});

    	return block;
    }

    // (207:10) {:else}
    function create_else_block(ctx) {
    	let tierprogress;
    	let current;

    	tierprogress = new TierProgress({
    			props: {
    				amountToNextTier: /*amountToNextTier*/ ctx[8],
    				nextTier: /*nextTier*/ ctx[9]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(tierprogress.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tierprogress, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tierprogress.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tierprogress.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tierprogress, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(207:10) {:else}",
    		ctx
    	});

    	return block;
    }

    // (205:10) {#if !isLoggedIn}
    function create_if_block(ctx) {
    	let join;
    	let current;
    	join = new Join$1({ $$inline: true });
    	join.$on("sign-in", /*handleSignIn*/ ctx[11]);

    	const block = {
    		c: function create() {
    			create_component(join.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(join, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(join.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(join.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(join, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(205:10) {#if !isLoggedIn}",
    		ctx
    	});

    	return block;
    }

    // (203:8) <Notification on:dismiss={() => hasNotifications = false}           type={notificationType}>
    function create_default_slot(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*isLoggedIn*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(203:8) <Notification on:dismiss={() => hasNotifications = false}           type={notificationType}>",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let tailwind;
    	let t0;
    	let div5;
    	let div1;
    	let div0;
    	let t1;
    	let t2;
    	let div0_style_value;
    	let t3;
    	let div4;
    	let div3;
    	let div2;
    	let badge;
    	let t4;
    	let notification;
    	let div2_class_value;
    	let t5;
    	let toggler;
    	let current;
    	tailwind = new Tailwind({ $$inline: true });
    	let if_block0 = /*state*/ ctx[2] === STATE.JOIN && create_if_block_3(ctx);
    	let if_block1 = /*state*/ ctx[2] === STATE.SIGNIN && create_if_block_2(ctx);
    	let if_block2 = (/*state*/ ctx[2] === STATE.TIER_STATUS || /*state*/ ctx[2] === STATE.SIGNED_IN) && create_if_block_1(ctx);

    	badge = new Badge({
    			props: { show: /*hasNotifications*/ ctx[3] },
    			$$inline: true
    		});

    	notification = new Notification({
    			props: {
    				type: /*notificationType*/ ctx[4],
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	notification.$on("dismiss", /*dismiss_handler*/ ctx[14]);

    	toggler = new Toggler({
    			props: {
    				isToggled: /*isToggled*/ ctx[1],
    				progress: /*progress*/ ctx[5]
    			},
    			$$inline: true
    		});

    	toggler.$on("toggle", /*handleToggle*/ ctx[10]);

    	const block = {
    		c: function create() {
    			create_component(tailwind.$$.fragment);
    			t0 = space();
    			div5 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			div4 = element("div");
    			div3 = element("div");
    			div2 = element("div");
    			create_component(badge.$$.fragment);
    			t4 = space();
    			create_component(notification.$$.fragment);
    			t5 = space();
    			create_component(toggler.$$.fragment);
    			attr_dev(div0, "class", "toggler-popup svelte-1wgrm56");
    			attr_dev(div0, "style", div0_style_value = /*widgetPopupStyle*/ ctx[7] + /*widgetHeightStyle*/ ctx[6]);
    			add_location(div0, file, 181, 6, 7224);
    			attr_dev(div1, "class", "perkd-membership-launcher-popup svelte-1wgrm56");
    			add_location(div1, file, 180, 2, 7172);
    			attr_dev(div2, "class", div2_class_value = "widget__notification " + (/*hasNotifications*/ ctx[3] ? "visible" : "hidden"));
    			add_location(div2, file, 200, 6, 7969);
    			attr_dev(div3, "class", "flex flex-col items-end -mt-4");
    			set_style(div3, "width", "400px");
    			add_location(div3, file, 199, 4, 7898);
    			attr_dev(div4, "id", "perkd-membership-widget-launcher");
    			add_location(div4, file, 198, 2, 7850);
    			attr_dev(div5, "aria-live", "polite");
    			set_style(div5, "position", "fixed");
    			set_style(div5, "bottom", "0");
    			set_style(div5, "right", "0");
    			add_location(div5, file, 179, 0, 7100);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(tailwind, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div5, anchor);
    			append_dev(div5, div1);
    			append_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t1);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(div0, t2);
    			if (if_block2) if_block2.m(div0, null);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			mount_component(badge, div2, null);
    			append_dev(div2, t4);
    			mount_component(notification, div2, null);
    			append_dev(div3, t5);
    			mount_component(toggler, div3, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*state*/ ctx[2] === STATE.JOIN) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*state*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_3(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div0, t1);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			if (/*state*/ ctx[2] === STATE.SIGNIN) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);

    					if (dirty & /*state*/ 4) {
    						transition_in(if_block1, 1);
    					}
    				} else {
    					if_block1 = create_if_block_2(ctx);
    					if_block1.c();
    					transition_in(if_block1, 1);
    					if_block1.m(div0, t2);
    				}
    			} else if (if_block1) {
    				group_outros();

    				transition_out(if_block1, 1, 1, () => {
    					if_block1 = null;
    				});

    				check_outros();
    			}

    			if (/*state*/ ctx[2] === STATE.TIER_STATUS || /*state*/ ctx[2] === STATE.SIGNED_IN) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);

    					if (dirty & /*state*/ 4) {
    						transition_in(if_block2, 1);
    					}
    				} else {
    					if_block2 = create_if_block_1(ctx);
    					if_block2.c();
    					transition_in(if_block2, 1);
    					if_block2.m(div0, null);
    				}
    			} else if (if_block2) {
    				group_outros();

    				transition_out(if_block2, 1, 1, () => {
    					if_block2 = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*widgetPopupStyle, widgetHeightStyle*/ 192 && div0_style_value !== (div0_style_value = /*widgetPopupStyle*/ ctx[7] + /*widgetHeightStyle*/ ctx[6])) {
    				attr_dev(div0, "style", div0_style_value);
    			}

    			const badge_changes = {};
    			if (dirty & /*hasNotifications*/ 8) badge_changes.show = /*hasNotifications*/ ctx[3];
    			badge.$set(badge_changes);
    			const notification_changes = {};
    			if (dirty & /*notificationType*/ 16) notification_changes.type = /*notificationType*/ ctx[4];

    			if (dirty & /*$$scope, isLoggedIn*/ 1048577) {
    				notification_changes.$$scope = { dirty, ctx };
    			}

    			notification.$set(notification_changes);

    			if (!current || dirty & /*hasNotifications*/ 8 && div2_class_value !== (div2_class_value = "widget__notification " + (/*hasNotifications*/ ctx[3] ? "visible" : "hidden"))) {
    				attr_dev(div2, "class", div2_class_value);
    			}

    			const toggler_changes = {};
    			if (dirty & /*isToggled*/ 2) toggler_changes.isToggled = /*isToggled*/ ctx[1];
    			if (dirty & /*progress*/ 32) toggler_changes.progress = /*progress*/ ctx[5];
    			toggler.$set(toggler_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tailwind.$$.fragment, local);
    			transition_in(if_block0);
    			transition_in(if_block1);
    			transition_in(if_block2);
    			transition_in(badge.$$.fragment, local);
    			transition_in(notification.$$.fragment, local);
    			transition_in(toggler.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tailwind.$$.fragment, local);
    			transition_out(if_block0);
    			transition_out(if_block1);
    			transition_out(if_block2);
    			transition_out(badge.$$.fragment, local);
    			transition_out(notification.$$.fragment, local);
    			transition_out(toggler.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tailwind, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div5);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			destroy_component(badge);
    			destroy_component(notification);
    			destroy_component(toggler);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function handleWidgetTogglerEvent(element, eventName, eventHandler) {
    	if (element.addEventListener) {
    		element.addEventListener(eventName, eventHandler, false);
    	} else if (element.attachEvent) {
    		element.attachEvent("on" + eventName, eventHandler);
    	}
    }

    function instance($$self, $$props, $$invalidate) {
    	let widgetPopupStyle;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots("App", slots, []);

    	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
    		function adopt(value) {
    			return value instanceof P
    			? value
    			: new P(function (resolve) {
    						resolve(value);
    					});
    		}

    		return new (P || (P = Promise))(function (resolve, reject) {
    				function fulfilled(value) {
    					try {
    						step(generator.next(value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function rejected(value) {
    					try {
    						step(generator["throw"](value));
    					} catch(e) {
    						reject(e);
    					}
    				}

    				function step(result) {
    					result.done
    					? resolve(result.value)
    					: adopt(result.value).then(fulfilled, rejected);
    				}

    				step((generator = generator.apply(thisArg, _arguments || [])).next());
    			});
    	};

    	let isLoggedIn = false,
    		amountToNextTier = "xx.00",
    		customerId = null,
    		hasNotifications = true,
    		isToggled = false,
    		nextTier = "X Memberhip",
    		notificationType = null,
    		progress = 10,
    		togglerPopupFrame = null,
    		widgetHeightStyle = "min-height: 370px";

    	let state = STATE.JOIN;

    	// FIXME: race condition
    	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    		console.log("[ON MOUNT] Membership Widget Toggler");

    		// @ts-ignore
    		if (window.__perkd__init__ && window.__perkd__init__.isLoggedIn) {
    			// console.log('[WIDGET APP] window.__perkd__init__', window.__perkd__init__)
    			// @ts-ignore
    			//  isLoggedIn = window.__perkd__init__.isLoggedIn  || false
    			//  console.info('shop id ', md5(window.__perkd__init__.shop))
    			// @ts-ignore
    			console.info("[PERKD WIDGET] Customer is logged in ", window.__perkd__init__.isLoggedIn);

    			// @ts-ignore
    			console.info("[PERKD WIDGET] Customer ID  ", window.__perkd__init__.customerId);

    			// @ts-ignore
    			if (window.__perkd__init__.customerId) {
    				// @ts-ignore
    				customerId = `${window.__perkd__init__.customerId}`;

    				asyncFetchProgress();
    			}
    		}

    		togglerPopupFrame = document.getElementById("perkd-membership-widget-frame");
    	}));

    	function handleToggle() {
    		$$invalidate(1, isToggled = !isToggled);
    		$$invalidate(3, hasNotifications = false);

    		if (isLoggedIn && isToggled) {
    			$$invalidate(2, state = STATE.TIER_STATUS);
    			return;
    		}
    	} // if (isToggled) {
    	// togglerPopupFrame.contentWindow.postMessage({

    	//   type: 'membership:onsync',
    	//   state:  {
    	//     view:  state
    	//   }
    	// }, '*');
    	// state = STATE.JOIN
    	// }
    	function asyncFetchProgress() {
    		api.get("https://60e6fb1315387c00173e49d7.mockapi.io/subscription/1").then(res => {
    			var _a;
    			const { data } = res;
    			console.log("async fetched data ", data);

    			const currentTier = data === null || data === void 0
    			? void 0
    			: data.tiers[((_a = data === null || data === void 0 ? void 0 : data.tiers) === null || _a === void 0
    				? void 0
    				: _a.length) - 1];

    			if (currentTier) {
    				// TODO: create typings
    				const { amountToQualify, amountSpent } = currentTier;

    				$$invalidate(5, progress = Math.round(amountSpent / amountToQualify * 100));
    			}
    		}).catch(() => {
    			console.log("subscription url failed");
    		});
    	}

    	function findUser(data) {
    		var _a, _b;

    		const user = data.find(o => {
    			var _a, _b;

    			return ((_b = (_a = o.subscriptions[0]) === null || _a === void 0
    			? void 0
    			: _a.membership) === null || _b === void 0
    			? void 0
    			: _b.customerId) === customerId;
    		});

    		if (user === null || user === void 0
    		? void 0
    		: user.subscriptions) {
    			if ((_b = (_a = user === null || user === void 0
    			? void 0
    			: user.subscriptions[0]) === null || _a === void 0
    			? void 0
    			: _a.membership) === null || _b === void 0
    			? void 0
    			: _b.progress) {
    				$$invalidate(5, progress = user.subscriptions[0].membership.progress);
    				$$invalidate(3, hasNotifications = true);
    			}

    			return;
    		}

    		console.info("user not found");
    	}

    	// Listen to message from child window
    	handleWidgetTogglerEvent(window, "message", function (e) {
    		if (!e.data.type) return;
    		const { type: uiStatus } = e.data;

    		switch (uiStatus) {
    			case WINDOW_EVENTS.open:
    				console.log("[TOGGLER EVENT RECEIVED] perkd-membership:open");
    				break;
    			case WINDOW_EVENTS.signin:
    				console.log(`[TOGGLER  EVENT RECEIVED] ${WINDOW_EVENTS.signin}`);
    				$$invalidate(2, state = STATE.SIGNIN);
    				break;
    			case WINDOW_EVENTS.signinSuccess:
    				console.log(`[TOGGLER  EVENT RECEIVED] ${uiStatus}`);
    				$$invalidate(2, state = STATE.TIER_STATUS);
    				$$invalidate(0, isLoggedIn = true);
    				break;
    			case WINDOW_EVENTS.tierStatus:
    				console.log(`[TOGGLER  EVENT RECEIVED] ${uiStatus}`);
    				$$invalidate(2, state = STATE.TIER_STATUS);
    				break;
    			case WINDOW_EVENTS.close:
    				console.log("[TOGGLER EVENT RECEIVED] perkd-membership:close");
    				break;
    			case WINDOW_EVENTS.toggle:
    				console.log("[TOGGLER EVENT RECEIVED] perkd-membership:toggle");
    				handleToggle();
    				break;
    			default:
    				return null;
    		}
    	});

    	function handleSignIn() {
    		$$invalidate(1, isToggled = !isToggled);
    		$$invalidate(3, hasNotifications = false);
    		$$invalidate(6, widgetHeightStyle = heightStyles.signIn);
    		$$invalidate(2, state = STATE.SIGNIN);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const sign_in_handler = () => {
    		$$invalidate(2, state = STATE.SIGNIN);
    	};

    	const signed_in_handler = () => {
    		$$invalidate(2, state = STATE.SIGNED_IN);
    	};

    	const dismiss_handler = () => $$invalidate(3, hasNotifications = false);

    	$$self.$capture_state = () => ({
    		__awaiter,
    		onMount,
    		Badge,
    		Notification,
    		Join: Join$1,
    		TierProgress,
    		JoinPopup: Join,
    		Login,
    		TierStatus,
    		Tailwind,
    		Toggler,
    		api,
    		heightStyles,
    		NOTIFICATION_TYPE,
    		STATE,
    		WINDOW_EVENTS,
    		isLoggedIn,
    		amountToNextTier,
    		customerId,
    		hasNotifications,
    		isToggled,
    		nextTier,
    		notificationType,
    		progress,
    		togglerPopupFrame,
    		widgetHeightStyle,
    		state,
    		handleToggle,
    		asyncFetchProgress,
    		findUser,
    		handleWidgetTogglerEvent,
    		handleSignIn,
    		widgetPopupStyle
    	});

    	$$self.$inject_state = $$props => {
    		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
    		if ("isLoggedIn" in $$props) $$invalidate(0, isLoggedIn = $$props.isLoggedIn);
    		if ("amountToNextTier" in $$props) $$invalidate(8, amountToNextTier = $$props.amountToNextTier);
    		if ("customerId" in $$props) customerId = $$props.customerId;
    		if ("hasNotifications" in $$props) $$invalidate(3, hasNotifications = $$props.hasNotifications);
    		if ("isToggled" in $$props) $$invalidate(1, isToggled = $$props.isToggled);
    		if ("nextTier" in $$props) $$invalidate(9, nextTier = $$props.nextTier);
    		if ("notificationType" in $$props) $$invalidate(4, notificationType = $$props.notificationType);
    		if ("progress" in $$props) $$invalidate(5, progress = $$props.progress);
    		if ("togglerPopupFrame" in $$props) togglerPopupFrame = $$props.togglerPopupFrame;
    		if ("widgetHeightStyle" in $$props) $$invalidate(6, widgetHeightStyle = $$props.widgetHeightStyle);
    		if ("state" in $$props) $$invalidate(2, state = $$props.state);
    		if ("widgetPopupStyle" in $$props) $$invalidate(7, widgetPopupStyle = $$props.widgetPopupStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*isToggled*/ 2) {
    			$$invalidate(7, widgetPopupStyle = isToggled
    			? "transform: translateY(0px);  opacity: 1;"
    			: "transform: translateY(4px); opacity: 0;  min-height: 10px; pointer-events: none;"); // set height to 0
    		}

    		if ($$self.$$.dirty & /*isLoggedIn*/ 1) {
    			if (!isLoggedIn) {
    				$$invalidate(6, widgetHeightStyle = heightStyles.join);
    				$$invalidate(3, hasNotifications = true);
    				$$invalidate(4, notificationType = NOTIFICATION_TYPE.JOIN);
    				$$invalidate(5, progress = 10);
    			} else {
    				asyncFetchProgress();
    				$$invalidate(4, notificationType = NOTIFICATION_TYPE.PROGRESS);
    			}
    		}

    		if ($$self.$$.dirty & /*state*/ 4) {
    			if (state === STATE.SIGNIN) {
    				$$invalidate(6, widgetHeightStyle = heightStyles.signIn);
    			} else if (state === STATE.TIER_STATUS) {
    				$$invalidate(6, widgetHeightStyle = heightStyles.tierStatus);
    			} else {
    				$$invalidate(6, widgetHeightStyle = heightStyles.join);
    			}
    		}
    	};

    	return [
    		isLoggedIn,
    		isToggled,
    		state,
    		hasNotifications,
    		notificationType,
    		progress,
    		widgetHeightStyle,
    		widgetPopupStyle,
    		amountToNextTier,
    		nextTier,
    		handleToggle,
    		handleSignIn,
    		sign_in_handler,
    		signed_in_handler,
    		dismiss_handler
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    // shopify environment check
    const iframe = document.getElementById("perkd-membership-widget-shopify-launcher-iframe");
    const target = iframe
        ? iframe.contentWindow.document.getElementById("perkd-membership-widget-launcher")
        : document.getElementById("perkd-membership-dev");
    const app = new App({
        target,
        props: {
            isLocal: iframe == null,
        },
    });

    return app;

}());
//# sourceMappingURL=perkd-membership-widget.min.js.map
